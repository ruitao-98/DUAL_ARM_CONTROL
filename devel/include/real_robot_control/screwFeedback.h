// Generated by gencpp from file real_robot_control/screwFeedback.msg
// DO NOT EDIT!


#ifndef REAL_ROBOT_CONTROL_MESSAGE_SCREWFEEDBACK_H
#define REAL_ROBOT_CONTROL_MESSAGE_SCREWFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace real_robot_control
{
template <class ContainerAllocator>
struct screwFeedback_
{
  typedef screwFeedback_<ContainerAllocator> Type;

  screwFeedback_()
    : screw_status(0.0)  {
    }
  screwFeedback_(const ContainerAllocator& _alloc)
    : screw_status(0.0)  {
  (void)_alloc;
    }



   typedef double _screw_status_type;
  _screw_status_type screw_status;





  typedef boost::shared_ptr< ::real_robot_control::screwFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::real_robot_control::screwFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct screwFeedback_

typedef ::real_robot_control::screwFeedback_<std::allocator<void> > screwFeedback;

typedef boost::shared_ptr< ::real_robot_control::screwFeedback > screwFeedbackPtr;
typedef boost::shared_ptr< ::real_robot_control::screwFeedback const> screwFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::real_robot_control::screwFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::real_robot_control::screwFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::real_robot_control::screwFeedback_<ContainerAllocator1> & lhs, const ::real_robot_control::screwFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.screw_status == rhs.screw_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::real_robot_control::screwFeedback_<ContainerAllocator1> & lhs, const ::real_robot_control::screwFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace real_robot_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::real_robot_control::screwFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::real_robot_control::screwFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::real_robot_control::screwFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::real_robot_control::screwFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::real_robot_control::screwFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::real_robot_control::screwFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::real_robot_control::screwFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e3afaebb6a3462d8877452e53c10c331";
  }

  static const char* value(const ::real_robot_control::screwFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe3afaebb6a3462d8ULL;
  static const uint64_t static_value2 = 0x877452e53c10c331ULL;
};

template<class ContainerAllocator>
struct DataType< ::real_robot_control::screwFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "real_robot_control/screwFeedback";
  }

  static const char* value(const ::real_robot_control::screwFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::real_robot_control::screwFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#连续反馈\n"
"float64 screw_status\n"
"\n"
;
  }

  static const char* value(const ::real_robot_control::screwFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::real_robot_control::screwFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.screw_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct screwFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::real_robot_control::screwFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::real_robot_control::screwFeedback_<ContainerAllocator>& v)
  {
    s << indent << "screw_status: ";
    Printer<double>::stream(s, indent + "  ", v.screw_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REAL_ROBOT_CONTROL_MESSAGE_SCREWFEEDBACK_H
