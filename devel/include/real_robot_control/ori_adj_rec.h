// Generated by gencpp from file real_robot_control/ori_adj_rec.msg
// DO NOT EDIT!


#ifndef REAL_ROBOT_CONTROL_MESSAGE_ORI_ADJ_REC_H
#define REAL_ROBOT_CONTROL_MESSAGE_ORI_ADJ_REC_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace real_robot_control
{
template <class ContainerAllocator>
struct ori_adj_rec_
{
  typedef ori_adj_rec_<ContainerAllocator> Type;

  ori_adj_rec_()
    : phi(0)
    , point_num(0)
    , record_item(0)
    , Rx(0.0)
    , Ry(0.0)
    , Rz(0.0)  {
    }
  ori_adj_rec_(const ContainerAllocator& _alloc)
    : phi(0)
    , point_num(0)
    , record_item(0)
    , Rx(0.0)
    , Ry(0.0)
    , Rz(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _phi_type;
  _phi_type phi;

   typedef int32_t _point_num_type;
  _point_num_type point_num;

   typedef int32_t _record_item_type;
  _record_item_type record_item;

   typedef double _Rx_type;
  _Rx_type Rx;

   typedef double _Ry_type;
  _Ry_type Ry;

   typedef double _Rz_type;
  _Rz_type Rz;





  typedef boost::shared_ptr< ::real_robot_control::ori_adj_rec_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::real_robot_control::ori_adj_rec_<ContainerAllocator> const> ConstPtr;

}; // struct ori_adj_rec_

typedef ::real_robot_control::ori_adj_rec_<std::allocator<void> > ori_adj_rec;

typedef boost::shared_ptr< ::real_robot_control::ori_adj_rec > ori_adj_recPtr;
typedef boost::shared_ptr< ::real_robot_control::ori_adj_rec const> ori_adj_recConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::real_robot_control::ori_adj_rec_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::real_robot_control::ori_adj_rec_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::real_robot_control::ori_adj_rec_<ContainerAllocator1> & lhs, const ::real_robot_control::ori_adj_rec_<ContainerAllocator2> & rhs)
{
  return lhs.phi == rhs.phi &&
    lhs.point_num == rhs.point_num &&
    lhs.record_item == rhs.record_item &&
    lhs.Rx == rhs.Rx &&
    lhs.Ry == rhs.Ry &&
    lhs.Rz == rhs.Rz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::real_robot_control::ori_adj_rec_<ContainerAllocator1> & lhs, const ::real_robot_control::ori_adj_rec_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace real_robot_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::real_robot_control::ori_adj_rec_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::real_robot_control::ori_adj_rec_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::real_robot_control::ori_adj_rec_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::real_robot_control::ori_adj_rec_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::real_robot_control::ori_adj_rec_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::real_robot_control::ori_adj_rec_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::real_robot_control::ori_adj_rec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "41fd7db046eaccfb5112edd2ddb827ba";
  }

  static const char* value(const ::real_robot_control::ori_adj_rec_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x41fd7db046eaccfbULL;
  static const uint64_t static_value2 = 0x5112edd2ddb827baULL;
};

template<class ContainerAllocator>
struct DataType< ::real_robot_control::ori_adj_rec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "real_robot_control/ori_adj_rec";
  }

  static const char* value(const ::real_robot_control::ori_adj_rec_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::real_robot_control::ori_adj_rec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 phi\n"
"int32 point_num\n"
"int32 record_item\n"
"float64 Rx\n"
"float64 Ry\n"
"float64 Rz\n"
;
  }

  static const char* value(const ::real_robot_control::ori_adj_rec_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::real_robot_control::ori_adj_rec_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.phi);
      stream.next(m.point_num);
      stream.next(m.record_item);
      stream.next(m.Rx);
      stream.next(m.Ry);
      stream.next(m.Rz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ori_adj_rec_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::real_robot_control::ori_adj_rec_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::real_robot_control::ori_adj_rec_<ContainerAllocator>& v)
  {
    s << indent << "phi: ";
    Printer<int32_t>::stream(s, indent + "  ", v.phi);
    s << indent << "point_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.point_num);
    s << indent << "record_item: ";
    Printer<int32_t>::stream(s, indent + "  ", v.record_item);
    s << indent << "Rx: ";
    Printer<double>::stream(s, indent + "  ", v.Rx);
    s << indent << "Ry: ";
    Printer<double>::stream(s, indent + "  ", v.Ry);
    s << indent << "Rz: ";
    Printer<double>::stream(s, indent + "  ", v.Rz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REAL_ROBOT_CONTROL_MESSAGE_ORI_ADJ_REC_H
