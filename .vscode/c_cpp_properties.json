{
    "configurations": [
        {
            "name": "Linux",
            "includePath": [
                "${workspaceFolder}/**",
                "/opt/ros/noetic/include/**",
                "/usr/include/**",
                "/usr/include/eigen3/**",
                // "/home/yanji/mujoco/mujoco-3.1.1/my_project/ros_dual_robot_planing/src/real_robot_control/include",
                "/home/yanji/dual_arm_control/devel/include/**",
                "/home/yanji/dual_arm_control/src/real_robot_control/include/**",
                "/home/yanji/dual_arm_control/src/real_robot_control/include/real_robot_control/**"
            
            ],
            "browse": {  //daima buqua 
                "path": [
                    "/opt/ros/noetic/include",  // 明确指定 ROS2 核心路径
                    "/home/yanji/dual_arm_control/src/**",
                    "/home/yanji/dual_arm_control/devel/include/**",
                    "${workspaceFolder}/src/**", //项目源码
                    "${workspaceFolder}/**"
                ],
                "limitSymbolsToIncludedHeaders": true  // 性能优化关键
                // true：仅索引 实际被项目包含的头文件（通过 #include 引入的符号）
                // false：索引 browse.path 中所有头文件（无论是否被项目包含）
            },
            "defines": [],
            "cStandard": "c17",
            "cppStandard": "gnu++14",
            "intelliSenseMode": "linux-gcc-x64",
            "compilerPath": "/usr/lib/ccache/g++"
        }
    ],
    "version": 4
}


// 配置项	includePath	browse.path
// 作用	控制 代码补全 和 错误检查	控制 符号索引 和 代码导航
// 优先级	高（直接影响语法分析）	低（仅影响符号数据库）
// 性能影响	低（仅检查当前文件相关路径）	高（递归索引所有路径下的符号）
// 典型场景	解决 #include 红色波浪线警告	解决 Go to Definition 失效
// 递归符号	** 表示递归子目录	** 表示递归子目录
// 默认值	空	${workspaceFolder}/**